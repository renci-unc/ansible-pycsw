---

# Requires ansible>=2.3.0.

- hosts: csw
  vars_files:
    - variables/csw-setup.yml
  vars:
    conda_installer: "{{ conda.type }}{{ conda.installer.version }}-{{ conda.version }}-{{ conda.platform }}.{{ conda.installer.extension }}"
    root_conda_executable: "{{ conda.location }}/bin/conda"
    env_location: "{{ conda.location }}/envs/{{ conda.environment.name }}"
    env_conda_executable: "{{ env_location }}/bin/conda"
  remote_user: root
  tasks:
  - name: remove conda env from profile
    file:
    args:
      path: /etc/profile.d/conda.sh
      state: absent

  - name: update all
    yum:
    args:
      name: '*'
      state: latest
      skip_broken: yes

  - name: install prereqs
    yum:
    args:
      name:
        - binutils
        - gcc
        - gcc-c++
        - make
        - openssl-devel
        - bzip2
        - ca-certificates
        - git
        - glib2
        - libSM
        - libXext
        - libXrender
        - pwgen
        - wget

  - name: fetch anaconda
    get_url:
    args:
      url: "{{ conda.archive }}/{{ conda_installer }}"
      dest: "{{ conda.installer.location }}/{{ conda_installer }}"

  - name: install anaconda
    shell: >
      "{{ conda.installer.shell }}"
      "{{ conda.installer.location }}/{{ conda_installer }}"
      -b -p "{{ conda.location }}"
    args:
      executable: "{{ conda.installer.shell }}"
      creates: "{{ conda.location }}"

  - name: alter PATH to include conda/bin
    template:
    args:
      src: templates/profile-d-conda-sh-1.j2
      dest: /etc/profile.d/conda.sh

  - name: is conda-build already installed?
    shell: >
      which conda-build
    ignore_errors: yes
    register: conda_build
    args:
      executable: "{{ csw.shell }}"

  - name: install conda-build in conda root
    shell: >
      "{{ root_conda_executable }}" install -y \
        conda-build \
        && \
        "{{ root_conda_executable }}" clean -a -y
    when: "'no conda-build in' in conda_build.stderr"
    args:
      executable: "{{ conda.shell }}"

  - name: configure conda
    shell: >
      "{{ root_conda_executable }}"  config \
          --set always_yes yes \
          --set changeps1 no \
          --set show_channel_urls True \
          && \
      "{{ root_conda_executable }}" config \
          --add channels conda-forge \
          && \
      "{{ root_conda_executable }}" clean -a -y
    args:
      executable: "{{ conda.shell }}"

  - name: create conda environment
    shell: >
      "{{ root_conda_executable }}" create
      -n "{{ conda.environment.name }}"
      "python={{ conda.environment.version }}"
      "{{ conda.environment.specs }}"
    args:
      executable: "{{ conda.shell }}"
      creates: "{{ conda.location }}/envs/{{ conda.environment.name }}"

  - name: alter PATH to include conda env
    template:
    args:
      src: templates/profile-d-conda-sh-2.j2
      dest: /etc/profile.d/conda.sh

  - name: clone pycsw
    git:
    args:
      repo: "{{ git.repo }}"
      dest: "{{ git.dest }}"
      version: "{{ git.version }}"

  - name: install requirements
    shell: >
      "{{ env_conda_executable }}" install -y \
        --file requirements.txt \
        --file requirements-standalone.txt \
        gunicorn \
        libxml2==2.9.3 \
        && \
        "{{ env_conda_executable }}" clean -a -y
    args:
      executable: "{{ conda.shell }}"
      chdir: "{{ git.dest }}"

  - name: install pycsw
    shell: "{{ env_conda_executable }} develop ."
    args:
      executable: "{{ conda.shell }}"
      chdir: "{{ git.dest }}"

  - name: install default.cfg
    template:
    args:
      src: templates/default.j2
      dest: "{{ git.dest }}/default.cfg"

    # Bug in ansible getent module.
    # Group may already exist externally.
  - name: does group already exist?
    shell: "getent group {{ csw.group }}"
    ignore_errors: yes
    register: getent_csw_group
    args:
      executable: "{{ csw.shell }}"

    # No bug in group module state option for external group.
    # But creating group with same genent stdout test as user.
  - name: create group if not present
    group:
    when: csw.group not in getent_csw_group.stdout
    args:
      name: "{{ csw.group }}"
      state: present

    # Bug in ansible getent module for external user.
    # User may already exist externally.
  - name: does user already exist?
    shell: "getent passwd {{ csw.user }}"
    ignore_errors: yes
    register: getent_csw_user
    args:
      executable: "{{ csw.shell }}"

    # Bug in user module state option.
  - name: create user if not present 
    user:
    when: csw.user not in getent_csw_user.stdout
    args:
      name: "{{ csw.user }}"
      home: "{{ csw.home }}"
      group: "{{ csw.group }}"
      system: yes
      shell: "{{ csw.shell }}"
      state: present

  - name: create csw home directory if not present
    file:
    args:
      path: "{{ csw.home }}"
      owner: "{{ csw.user }}"
      group: "{{ csw.group }}"
      mode: 0700
      state: directory

    # File module checks for every FS object in tree.
    # Takes too long for big trees.
  - name: change ownership of csw installation
    command: >
      chown -R {{ csw.user }}:{{ csw.group }} {{ git.dest }}

  - name: create subdirectories if not present
    file:
    args:
      path: "{{ csw.home }}/{{ item }}"
      owner: "{{ csw.user }}"
      group: "{{ csw.group }}"
      mode: 0700
      state: directory
    with_items:
      - database
      - logs
      - store
      - force
      - export

  - name: install scripts
    template:
    args:
      src: "templates/scripts/{{ item }}.j2"
      dest: "/usr/local/bin/{{ item }}"
      owner: root
      group: root
      mode: 0755
    with_items:
      - pycsw_export
      - pycsw_load
      - pycsw_setup
      - pycsw_force
      - pycsw_optimize
      - pycsw_wipe

  - name: create database
    shell: >
       runuser -s {{ csw.shell }} {{ csw.user }} -c "pycsw_setup 2>&1 | logger -s -t pycsw_setup"
    args:
      executable: "{{ csw.shell }}"

  - name: install cron job
    template:
    args:
      src: templates/cron.d/pycsw
      dest: /etc/cron.d/pycsw
      owner: root
      group: root
      mode: 0644
 
  - name: install service script
    template:
    args:
      src: "templates/pycsw-sh.j2"
      dest: "/usr/local/bin/pycsw"
      owner: root
      group: root
      mode: 0755

...
